@page "/articles"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject BlazorUser BlazorUser
@inject HttpClient HttpClient
@using System.Text.Json

<nav class="py-3 navbar navbar-expand-lg fixed-top">
    <div class="container">
        <h2> Школа выживания</h2>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="#">Главная</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="/articles">Статьи</a>
                </li>
                @*   <li class="nav-item">
                <a class="nav-link" href="#">Форум</a>
                </li> *@
                @if (BlazorUser.User != null)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/profile">Личный кабинет</a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/registration">Зарегистрироваться</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

<div class="my-5 container main-content pt-5">
    <div class="row ">
        <div class="col-md-12">
            @* <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-success" @onclick="CreateArticle">Создать статью</button>
                @if (BlazorUser.User != null && BlazorUser.User.RoleId == 2)
                {
                    <button class="btn btn-warning ms-2" @onclick="ShowUnapprovedArticles">Перейти к неподтверждённым статьям</button>
                }
                @if (BlazorUser.User != null)
                {
                    <button class="btn btn-info ms-2" @onclick="ShowMyArticles">Перейти к своим статьям</button>
                }
                <button class="btn btn-secondary ms-2" @onclick="ShowAllArticles">Все статьи</button>
            </div> *@
            <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-success" @onclick="CreateArticle">
                <i class="bi bi-plus-square"></i>
            </button>
            @if (BlazorUser.User != null && BlazorUser.User.RoleId == 2)
            {
                <button class="btn btn-warning ms-2" @onclick="ShowUnapprovedArticles">
                    <i class="bi bi-eye"></i>
                </button>
            }
            @if (BlazorUser.User != null)
            {
                <button class="btn btn-info ms-2" @onclick="ShowMyArticles">
                    <i class="bi bi-bookmark-heart"></i>
                </button>
            }
            <button class="btn btn-secondary ms-2" @onclick="ShowAllArticles">
               <i class="bi bi-bookmarks"></i>
            </button>
        </div>
            @if (Lectures == null)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Загрузка...</span>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-3 g-3">
                    @foreach (var lecture in Lectures)
                    {
                        <div class="col">
                            <div class="card h-100 @(lecture.IsApproved ? "" : "unapproved-article")">
                                <div class="card-body d-flex flex-column justify-content-between">
                                    @if (!lecture.IsApproved)
                                    {
                                        <div class="unapproved-label">Не одобрена</div>
                                    }
                                    <h5 class="card-title">@lecture.Title</h5>
                                    <p class="card-text flex-grow-1">
                                        @(lecture.Content.Length > 250 ?
                                            lecture.Content.Substring(0, 250) + "..." : lecture.Content)
                                    </p>
                                    <p class="card-text"> <i class="bi bi-person"></i> @lecture.Author</p>
                                    <p class="text-muted">@lecture.CreatedDate.ToShortDateString()</p>
                                    
                                    <div class="d-flex justify-content-between">

                                        <button class="btn btn-primary flex-grow-1" @onclick="() => NavigateToArticle(lecture.LectureID)">Читать далее</button>
                                        @if (BlazorUser.User != null)
                                        {
                                            @if (BlazorUser.User.RoleId == 2 || (BlazorUser.User.RoleId != 2 && lecture.CreatedBy == BlazorUser.User.UserId))
                                            {
                                               <button class="btn btn-danger ms-2 flex-fill" @onclick="() => DeleteArticle(lecture.LectureID)" data-bs-toggle="tooltip" data-bs-placement="top" title="Удалить статью">
                                                    <i class="bi bi-trash3"></i>
                                                </button>
                                                <button class="btn btn-secondary ms-2 flex-fill" @onclick="() => EditArticle(lecture.LectureID)" data-bs-toggle="tooltip" data-bs-placement="top" title="Изменить статью">
                                                    <i class="bi bi-pencil-square"></i>
                                                </button>
                                            }
                                            @if (BlazorUser.User.RoleId == 2 && !lecture.IsApproved)
                                            {
                                                <button class="btn btn-success ms-2 flex-fill" @onclick="() => ApproveArticle(lecture.LectureID)" data-bs-toggle="tooltip" data-bs-placement="top" title="Одобрить статью">
                                                    <i class="bi bi-check2-square"></i>
                                                </button>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<GetLectureResponse> Lectures;
    private bool ShowUnapproved = false;
    private bool ShowMyArticlesFlag = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadLectures();
    }

    private async Task LoadLectures()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://survivalschoolfinalapi.onrender.com/");

        // Получаем список лекций
        var lectures = await client.GetFromJsonAsync<List<GetLectureResponse>>("api/Lecture");

        // Фильтруем лекции в зависимости от роли пользователя и статуса утверждения
        if (BlazorUser.User != null)
        {
            if (BlazorUser.User.RoleId == 1 && !ShowMyArticlesFlag) // Обычный пользователь и не показываем свои статьи
            {
                lectures = lectures.Where(l => l.IsApproved).ToList();
            }
            else if (BlazorUser.User.RoleId == 2 && ShowUnapproved) // Администратор и показываем неподтвержденные
            {
                lectures = lectures.Where(l => !l.IsApproved).ToList();
            }
            else if (ShowMyArticlesFlag) // Показываем только статьи текущего пользователя
            {
                lectures = lectures.Where(l => l.CreatedBy == BlazorUser.User.UserId).ToList();
            }
        }
        else
        {
            // Если пользователь не авторизован, показываем только утвержденные статьи
            lectures = lectures.Where(l => l.IsApproved).ToList();
        }

        Lectures = lectures;

        // Получаем информацию о пользователях для каждой лекции
        foreach (var lecture in Lectures)
        {
            try
            {
                var user = await client.GetFromJsonAsync<User>($"/api/User/{lecture.CreatedBy}");
                lecture.Author = user?.Username ?? "Неизвестный пользователь";
            }
            catch (HttpRequestException)
            {
                // Если пользователь не найден, устанавливаем "Неизвестный пользователь"
                lecture.Author = "Неизвестный пользователь";
            }
        }
    }

    private async Task CreateArticle()
    {
        if (BlazorUser.User == null)
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Для создании статьи вам необходимо войти в аккаунт. Хотите войти в аккаунт?");
            if (confirmed)
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/create-article");
        }
    }

    private async Task ShowUnapprovedArticles()
    {
        ShowUnapproved = true;
        ShowMyArticlesFlag = false; // Сбрасываем флаг своих статей
        await LoadLectures();
    }

    private async Task ShowMyArticles()
    {
        ShowMyArticlesFlag = true;
        ShowUnapproved = false; // Сбрасываем флаг неподтвержденных статей
        await LoadLectures();
    }

    private async Task ShowAllArticles()
    {
        ShowUnapproved = false;
        ShowMyArticlesFlag = false;
        await LoadLectures();
    }

    private async Task DeleteArticle(int lectureId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Вы точно уверены, что хотите удалить статью?");
        if (confirmed)
        {
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri("https://survivalschoolfinalapi.onrender.com/");

            var response = await client.DeleteAsync($"api/Lecture/{lectureId}");
            if (response.IsSuccessStatusCode)
            {
                Lectures = Lectures.Where(l => l.LectureID != lectureId).ToList();
            }
            else
            {
                // Обработка ошибки удаления
                await JSRuntime.InvokeVoidAsync("alert", "Не удалось удалить статью.");
            }
        }
    }

    private async Task ApproveArticle(int lectureId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Вы точно уверены, что хотите одобрить статью?");
        if (confirmed)
        {
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri("https://survivalschoolfinalapi.onrender.com/");

            var response = await client.PutAsync($"api/Lecture/approve/{lectureId}", null);

            if (response.IsSuccessStatusCode)
            {
                // Обновляем локальный список статей
                var updatedLecture = Lectures.FirstOrDefault(l => l.LectureID == lectureId);
                if (updatedLecture != null)
                {
                    updatedLecture.IsApproved = true;
                }

                await JSRuntime.InvokeVoidAsync("alert", "Статья успешно одобрена.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Не удалось одобрить статью.");
            }
        }
    }

    private void EditArticle(int lectureId)
    {
        NavigationManager.NavigateTo($"/edit-article/{lectureId}");
    }
     private void NavigateToArticle(int lectureId)
    {
        NavigationManager.NavigateTo($"/article/{lectureId}");
    }

    public class GetLectureResponse
    {
        public int LectureID { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }
        public int CategoryId { get; set; }
        public DateTime UpdatedDate { get; set; }
        public string? PhotoUrl { get; set; }
        public int CreatedBy { get; set; }
        public DateTime CreatedDate { get; set; }
        public string Author { get; set; } // Добавляем свойство для имени автора
        public bool IsApproved { get; set; } // Добавляем свойство для статуса утверждения
    }

    public class User
    {
        public int UserId { get; set; }
        public string Username { get; set; } = null!;
        public string Email { get; set; } = null!;
        public string Pass { get; set; } = null!;
        public string FirstName { get; set; } = null!;
        public string LastName { get; set; } = null!;
        public DateTime RegistrationDate { get; set; }
        public DateTime? LastLoginDate { get; set; }
        public int RoleId { get; set; }
    }
}