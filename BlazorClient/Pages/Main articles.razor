@page "/articles"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject BlazorUser BlazorUser
@inject HttpClient HttpClient
@using System.Text.Json

<nav class="py-3 navbar navbar-expand-lg fixed-top">
    <div class="container">
        <h2> Школа выживания</h2>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="#">Главная</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="/articles">Статьи</a>
                </li>
                @*   <li class="nav-item">
                <a class="nav-link" href="#">Форум</a>
                </li> *@
                @if (BlazorUser.User != null)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/profile">Личный кабинет</a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/registration">Зарегистрироваться</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

<div class="my-5 container main-content pt-5">
    <div class="row ">
        <div class="col-md-12">
             <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-success" @onclick="CreateArticle">Создать статью</button>
            </div>
            @if (Lectures == null)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Загрузка...</span>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-3 g-3">
                    @foreach (var lecture in Lectures)
                    {
                        <div class="col">
                            <div class="card h-100">
                                <div class="card-body d-flex flex-column justify-content-between">
                                    <h5 class="card-title">@lecture.Title</h5>
                                    <p class="card-text flex-grow-1">
                                        @(lecture.Content.Length > 250 ?
                                            lecture.Content.Substring(0, 250) + "..." : lecture.Content)
                                    </p>
                                    <p class="card-text text-muted">@lecture.CreatedDate.ToShortDateString()</p>
                                    <p class="card-text text-muted">Автор: @lecture.Author</p>
                                    <a href="@($"/article/{lecture.LectureID}")" class="btn btn-primary mt-auto">Читать далее</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<GetLectureResponse> Lectures;

    protected override async Task OnInitializedAsync()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://survivalschoolfinalapi.onrender.com/");

        // Получаем список лекций
        Lectures = await client.GetFromJsonAsync<List<GetLectureResponse>>("api/Lecture");

        // Получаем информацию о пользователях для каждой лекции
        foreach (var lecture in Lectures)
        {
            try
            {
                var user = await client.GetFromJsonAsync<User>($"/api/User/{lecture.CreatedBy}");
                lecture.Author = user?.Username ?? "Неизвестный пользователь";
            }
            catch (HttpRequestException)
            {
                // Если пользователь не найден, устанавливаем "Неизвестный пользователь"
                lecture.Author = "Неизвестный пользователь";
            }
        }
    }

     private async Task CreateArticle()
    {
        if (BlazorUser.User == null)
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Для создании статьи вам необходимо войти в аккаунт. Хотите войти в аккаунт?");
            if (confirmed)
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/create-article");
        }
    }

    public class GetLectureResponse
    {
        public int LectureID { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }
        public int CreatedBy { get; set; }
        public DateTime CreatedDate { get; set; }
        public string Author { get; set; } // Добавляем свойство для имени автора
    }

    public class User
    {
        public int UserId { get; set; }
        public string Username { get; set; } = null!;
        public string Email { get; set; } = null!;
        public string Pass { get; set; } = null!;
        public string FirstName { get; set; } = null!;
        public string LastName { get; set; } = null!;
        public DateTime RegistrationDate { get; set; }
        public DateTime? LastLoginDate { get; set; }
        public int RoleId { get; set; }
    }
}