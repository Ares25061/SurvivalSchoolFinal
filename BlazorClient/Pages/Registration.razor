@page "/registration"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using System.Text.Json
@using System.Text.RegularExpressions

<section class="bg-green ">
    <div class="mask d-flex align-items-center gradient-custom-3 vh-100 vh-100 main-content">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                    <div class="card border shadow p-3 mb-5 bg-white" style="border-radius: 15px;">
                        <div class="card-body">
                            <h2 class="text-center mb-1">Создать аккаунт</h2>
                            <form>
                                <div class="form-group mb-3 text-start">
                                    <label for="username"><b>Логин</b></label>
                                    <input type="text" class="form-control" @bind="Username"
                                           placeholder="Введите логин">
                                    @if (ShowUsernameMessage)
                                    {
                                        <p class="text-danger">Логин должен содержать не менее 5 символов и хотя бы 3 английские буквы</p>
                                    }
                                    <div class="alert alert-info mt-2" role="alert">
                                        Логин должен содержать не менее 5 символов и хотя бы 3 английские буквы.
                                    </div>
                                </div>
                                <div class="form-group mb-4 text-start">
                                    <label for="email"><b>Почта</b></label>
                                    <input type="email" class="form-control" @bind="Email"
                                           placeholder="example@mail.com">
                                    @if (ShowEmailMessage)
                                    {
                                        <p class="text-danger">Почта не введена или не соответствует требованиям</p>
                                    }
                                </div>
                                <div class="form-group mb-3 text-start">
                                    <label for="password"><b>Пароль</b></label>
                                    <input type="password" class="form-control" @bind="Pass"
                                           placeholder="Введите пароль">
                                    @if (ShowPasswordMessage)
                                    {
                                        <p class="text-danger">Пароль не введен или не соответствует требованиям</p>
                                    }
                                    <div class="alert alert-info mt-2" role="alert">
                                        Пароль должен быть минимум 8 символов, содержать 2 английские буквы разного регистра и хотя бы одну цифру.
                                    </div>
                                </div>
                                <div class="form-group mb-3 text-start">
                                    <label for="firstName"><b>Имя</b></label>
                                    <input type="text" class="form-control" placeholder="Иван" @bind="FirstName">
                                    @if (ShowFirstNameMessage)
                                    {
                                        <p class="text-danger">Имя не введено или не соответствует формату</p>
                                    }
                                </div>
                                <div class="form-group mb-3 text-start">
                                    <label for="lastName"><b>Фамилия</b></label>
                                    <input type="text" class="form-control" @bind="LastName" placeholder="Иванов">
                                    @if (ShowLastNameMessage)
                                    {
                                        <p class="text-danger">Фамилия не введена или не соответствует формату</p>
                                    }
                                </div>

                                @if (ShowAccountExistsMessage == true)
                                {
                                    <p class="text-danger">Аккаунт с таким логином или почтой уже существует</p>
                                }

                                <div class="w-100 d-flex justify-content-center">
                                    <button type="button" class="btn btn-primary mt-auto" @onclick="CheckFields"
                                            disabled="@IsLoading">
                                        @if (IsLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status"
                                                  aria-hidden="true"></span>
                                            <span>Загрузка...</span>
                                        }
                                        else
                                        {
                                            <span>Зарегистрироваться</span>
                                        }
                                    </button>
                                </div>
                                <p class="text-center text-muted mt-2 mb-0">
                                    Уже есть аккаунт? <a href="/login" class="fw-bold text-body"><u>Вход</u></a>
                                </p>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    public string Username { get; set; }
    public string Email { get; set; }
    public string Pass { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    private bool ShowUsernameMessage { get; set; }
    private bool ShowEmailMessage { get; set; }
    private bool ShowPasswordMessage { get; set; }
    private bool ShowFirstNameMessage { get; set; }
    private bool ShowLastNameMessage { get; set; }
    private bool ShowAccountExistsMessage { get; set; } = false;
    private bool RegistrationSuccess { get; set; } // Флаг успешной регистрации
    private bool IsLoading { get; set; } // Флаг состояния загрузки

    public class User
    {
        public int UserId { get; set; }
        public string Username { get; set; } = null!;
        public string Email { get; set; } = null!;
        public string Pass { get; set; } = null!;
        public string FirstName { get; set; } = null!;
        public string LastName { get; set; } = null!;
        public DateTime RegistrationDate { get; set; }
        public DateTime? LastLoginDate { get; set; }
        public int RoleId { get; set; }
    }

    private async Task CheckFields()
    {
        ShowUsernameMessage = string.IsNullOrEmpty(Username) || !IsValidUsername(Username);
        ShowEmailMessage = string.IsNullOrEmpty(Email) || !IsValidEmail(Email);
        ShowPasswordMessage = string.IsNullOrWhiteSpace(Pass) || !IsValidPassword(Pass);
        ShowFirstNameMessage = string.IsNullOrEmpty(FirstName) || FormatName(FirstName) == null;
        ShowLastNameMessage = string.IsNullOrEmpty(LastName) || FormatName(LastName) == null;

        if (!ShowUsernameMessage && !ShowEmailMessage && !ShowPasswordMessage && !ShowFirstNameMessage && !ShowLastNameMessage)
        {
            IsLoading = true; // Устанавливаем флаг загрузки

            var user = new User
                {
                    Username = Username,
                    Email = Email,
                    Pass = Pass,
                    FirstName = FormatName(FirstName),
                    LastName = FormatName(LastName),
                    RegistrationDate = DateTime.UtcNow,
                    RoleId = 1 // Установите значение роли по умолчанию
                };

            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri("https://survivalschoolfinalapi.onrender.com/");
            HttpResponseMessage response = await client.PostAsJsonAsync("api/User", user);

            if (response.IsSuccessStatusCode)
            {
                RegistrationSuccess = true; // Устанавливаем флаг успешной регистрации
                await Task.Delay(3000); // Задержка для отображения сообщения
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                // Обработка ошибки
                Console.WriteLine("Ошибка при регистрации");
                ShowAccountExistsMessage = true;
                RegistrationSuccess = false; // Сбрасываем флаг успешной регистрации
            }

            IsLoading = false; // Сбрасываем флаг загрузки
        }
    }

    private bool IsValidUsername(string username)
    {
        if (string.IsNullOrWhiteSpace(username) || username.Length < 5)
            return false;
        // Логин должен содержать хотя бы 3 английские буквы
        return username.Count(char.IsLetter) >= 3;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;
        // Проверка на соответствие формату email
        string pattern = @"^[a-zA-Z0-9\.]+@[a-zA-Z]+\.[a-zA-Z]{2,3}$";
        return Regex.IsMatch(email, pattern);
    }

    private bool IsValidPassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return false;
        // Пароль должен быть минимум 8 символов, содержать 2 английские буквы разного регистра и хотя бы одну цифру
        return password.Length >= 8 &&
               password.Any(char.IsLower) &&
               password.Any(char.IsUpper) &&
               password.Any(char.IsDigit);
    }

    private string FormatName(string name)
    {
        name = Regex.Replace(name, @"[^а-яёА-ЯЁ\-]", "");
        if (string.IsNullOrEmpty(name))
        {
            return null;
        }
        else
        {
            if (Regex.IsMatch(name, @"^[а-яёА-ЯЁ]+(-[а-яёА-ЯЁ]+)?$"))
            {
                name = name.ToLower();
                string[] words = name.Split('-');
                for (int i = 0; i < words.Length; i++)
                {
                    if (words[i].Length > 0)
                    {
                        words[i] = char.ToUpper(words[i][0]) + words[i].Substring(1);
                    }
                }
                return string.Join("-", words);
            }
            else
            {
                return null;
            }
        }
    }
}